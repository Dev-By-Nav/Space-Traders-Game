import tkinter as tk
from tkinter import ttk

from collections import defaultdict
from datetime import datetime
from itertools import zip_longest

import json
import os.path
import requests

import locale

locale.setlocale(locale.LC_ALL, "")  # Use '' for auto, or force e.g. to 'en_US.UTF-8'

AGENT_FILE = "agents.json"

API_STATUS = "https://api.spacetraders.io/v2/"
LIST_FACTIONS = "https://api.spacetraders.io/v2/factions"
CLAIM_USER = "https://api.spacetraders.io/v2/register"
MY_ACCOUNT = "https://api.spacetraders.io/v2/my/agent"
MY_CONTRACTS = "https://api.spacetraders.io/v2/my/contracts"
MY_SHIPS = "https://api.spacetraders.io/v2/my/ships"

UTC_FORMAT = "%Y-%m-%dT%H:%M:%S.%f%z"
DISPLAY_FORMAT = " %B, %Y"

FACTION_LOOKUPS = {}

proxies = {}


def parse_datetime(dt):
    return datetime.strptime(dt, UTC_FORMAT)


def format_datetime(dt_text):
    dt = parse_datetime(dt_text)
    d = dt.day
    return (
        str(d)
        + ("th" if 11 <= d <= 13 else {1: "st", 2: "nd", 3: "rd"}.get(d % 10, "th"))
        + datetime.strftime(dt, DISPLAY_FORMAT)
    )


def load_player_logins():
    known_agents = {}

    if os.path.exists(AGENT_FILE):
        with open(AGENT_FILE) as json_agents:
            known_agents = json.load(json_agents)

    return known_agents


def store_agent_login(json_result):
    known_agents = load_player_logins()
    known_agents[json_result["symbol"]] = json_result["token"]

    with open(AGENT_FILE, "w") as json_agents:
        json.dump(known_agents, json_agents)


def get_faction_lookups():
    global FACTION_LOOKUPS
    if len(FACTION_LOOKUPS) > 0:
        return FACTION_LOOKUPS

    try:
        response = requests.get(
            LIST_FACTIONS,
            params={"limit": 20},
            proxies=proxies,
        )

        if response.status_code == 200:
            faction_json = response.json()
            for faction in faction_json["data"]:
                FACTION_LOOKUPS[faction["symbol"]] = faction["name"]

        else:
            print("Failed:", response.status_code, response.reason, response.text)

    except ConnectionError as ce:
        print("Failed:", ce)

    return FACTION_LOOKUPS


def generate_faction_combobox():
    faction_combobox["values"] = sorted(get_faction_lookups().values())


def generate_login_combobox():
    known_agents = load_player_logins()
    agent_list = sorted(known_agents.keys(), key=str.casefold)

    id_login["values"] = agent_list


def show_agent_summary(json_result):
    global FACTION_LOOKUPS
    tabs.tab(0, state=tk.DISABLED)
    tabs.tab(1, state=tk.NORMAL)
    tabs.tab(2, state=tk.NORMAL)

    player_token.set(json_result["token"])
    player_login.set(json_result["symbol"])
    player_faction.set(get_faction_lookups()[json_result["startingFaction"]])
    player_worth.set(f"{json_result['credits']:n}")

    tabs.select(1)


def register_agent():
    try:
        username = agent_name.get()
        faction = next(
            iter(
                [
                    symbol
                    for symbol, name in get_faction_lookups().items()
                    if name == agent_faction.get()
                ]
            )
        )

        response = requests.post(
            CLAIM_USER,
            data={"faction": faction, "symbol": username},
            proxies=proxies,
        )
        if response.status_code < 400:
            result = response.json()
            # used to hold the token for later
            result["data"]["agent"]["token"] = result["data"]["token"]
            store_agent_login(result["data"]["agent"])
            show_agent_summary(result["data"]["agent"])
            agent_name.set("")
        else:
            print("Failed:", response.status_code, response.reason, response.text)

    except StopIteration:
        print("Did they pick a faction?")

    except ConnectionError as ce:
        print("Failed:", ce)


def login_agent():
    player_token.set(player_login.get())

    # -1 -> user entered a new token, so there won't be a name selected
    if id_login.current() != -1:
        known_agents = load_player_logins()
        player_token.set(known_agents[player_login.get()])

    try:
        response = requests.get(
            MY_ACCOUNT,
            headers={
                "Accept": "application/json",
                "Authorization": f"Bearer {player_token.get()}",
            },
            proxies=proxies,
        )
        if response.status_code == 200:
            result = response.json()
            # used to hold the token for later
            result["data"]["token"] = player_token.get()
            show_agent_summary(result["data"])
            # print(result)

            # -1, so now store the agent name / token for future runs
            if id_login.current() == -1:
                store_agent_login(result["data"])

        else:
            print("Failed:", response.status_code, response.reason, response.text)

    except ConnectionError as ce:
        print("Failed:", ce)


def logout_agent():
    tabs.tab(0, state=tk.NORMAL)
    tabs.tab(1, state=tk.DISABLED)
    tabs.tab(2, state=tk.DISABLED)
    #tabs.tab(3, state=tk.DISABLED)
    

    player_login.set("")
    player_token.set("")

    tabs.select(0)


def refresh_tabs(event):
    selected_index = tabs.index(tabs.select())
    if selected_index == 1:
        refresh_player_summary()

    elif selected_index == 2:
        refresh_leaderboard()
        
    elif selected_index == 3:
        refresh_contracts()


def refresh_player_summary(*args):
    try:
        response = requests.get(
            MY_ACCOUNT,
            headers={
                "Accept": "application/json",
                "Authorization": f"Bearer {player_token.get()}",
            },
            proxies=proxies,
        )
        if response.status_code == 200:
            result = response.json()

            player_worth.set(f"{result['data']['credits']:n}")

        response = requests.get(
            MY_CONTRACTS,
            headers={
                "Accept": "application/json",
                "Authorization": f"Bearer {player_token.get()}",
            },
            proxies=proxies,
        )
        if response.status_code == 200:
            result = response.json()
            contract_view.delete(*contract_view.get_children())
            for row in result["data"]:
                if len(row["terms"]["deliver"]) == 1:
                    contract_view.insert(
                        "",
                        "end",
                        iid=row["id"],
                        text="contract_values",
                        open=True,
                        values=(
                            get_faction_lookups()[row["factionSymbol"]],
                            row["type"],
                            format_datetime(row["terms"]["deadline"]),
                            row["terms"]["deliver"][0]["tradeSymbol"],
                            row["terms"]["deliver"][0]["destinationSymbol"],
                            f"{(row['terms']['deliver'][0]['unitsRequired']-row['terms']['deliver'][0]['unitsFulfilled']):n}",
                        ),
                    )
                for subrow, item in enumerate(row["terms"]["deliver"][1:]):
                    contract_view.insert(
                        row["id"],
                        "end",
                        iid=f'{row["id"]}#{subrow}',
                        text="extra_items",
                        values=(
                            "",
                            "",
                            "",
                            item["tradeSymbol"],
                            item["destinationSymbol"],
                            f"{(item['unitsRequired']-item['unitsFulfilled']):n}",
                        ),
                    )

        else:
            print("Failed:", response.status_code, response.reason, response.text)


########## Contracts Tab ###########

def refresh_contracts(*args):
    """Fetches and displays available contracts."""
    try:
        response = requests.get(
            MY_CONTRACTS,
            headers={"Authorization": f"Bearer {player_token.get()}"},
            proxies=proxies,
        )

        if response.status_code == 200:
            result = response.json()
            contracts_view.delete(*contracts_view.get_children())  # Clear old data

            for contract in result["data"]:
                contracts_view.insert(
                    "", "end", values=(contract["id"], contract["type"], contract["factionSymbol"])
                )

        else:
            print("Failed:", response.status_code, response.reason, response.text)

    except requests.ConnectionError as ce:
        print("Failed:", ce)


def display_contract_details(event):
    """Displays details of the selected contract."""
    selected_item = contracts_view.focus()
    if not selected_item:
        return

    values = contracts_view.item(selected_item, "values")
    if not values:
        return

    contract_id = values[0]

    try:
        response = requests.get(
            f"{MY_CONTRACTS}/{contract_id}",
            headers={"Authorization": f"Bearer {player_token.get()}"},
            proxies=proxies,
        )

        if response.status_code == 200:
            contract = response.json()["data"]

            contract_id_var.set(contract["id"])
            contract_type_var.set(contract["type"])
            contract_faction_var.set(contract["factionSymbol"])
            contract_deadline_var.set(contract["terms"]["deadline"])
            contract_payment_var.set(f"{contract['terms']['payment']['onAccepted']:n}")

        else:
            print("Failed:", response.status_code, response.reason, response.text)

    except requests.ConnectionError as ce:
        print("Failed:", ce)


def accept_contract():
    """Accepts the selected contract."""
    contract_id = contract_id_var.get()
    if not contract_id:
        print("No contract selected.")
        return

    try:
        response = requests.post(
            f"{MY_CONTRACTS}/{contract_id}/accept",
            headers={"Authorization": f"Bearer {player_token.get()}"},
            proxies=proxies,
        )

        if response.status_code == 200:
            print(f"Contract {contract_id} accepted!")
            refresh_contracts()  # Refresh list after accepting

        else:
            print("Failed:", response.status_code, response.reason, response.text)

    except requests.ConnectionError as ce:
        print("Failed:", ce)


# Contracts Tab UI
contracts = ttk.Frame(tabs)
tabs.add(contracts, text="Contracts")

# Contract List
contracts_view = ttk.Treeview(contracts, height=6, columns=("ID", "Type", "Faction"), show="headings")
contracts_view.column("ID", anchor=tk.CENTER, width=150)
contracts_view.column("Type", anchor=tk.W, width=100)
contracts_view.column("Faction", anchor=tk.W, width=100)
contracts_view.heading("#1", text="ID")
contracts_view.heading("#2", text="Type")
contracts_view.heading("#3", text="Faction")
contracts_view.grid(row=0, column=0, columnspan=2, sticky=tk.NSEW)

# Scrollbar
contracts_scroll = ttk.Scrollbar(contracts, orient=tk.VERTICAL, command=contracts_view.yview)
contracts_scroll.grid(row=0, column=2, sticky=tk.NS)
contracts_view.config(yscrollcommand=contracts_scroll.set)

# Bind click event
contracts_view.bind("<Double-1>", display_contract_details)

# Contract Details Frame
contract_details = ttk.LabelFrame(contracts, text="Contract Details", padding=5)
contract_details.grid(row=1, column=0, columnspan=3, sticky=tk.NSEW)

contract_id_var = tk.StringVar()
contract_type_var = tk.StringVar()
contract_faction_var = tk.StringVar()
contract_deadline_var = tk.StringVar()
contract_payment_var = tk.StringVar()

ttk.Label(contract_details, text="ID:").grid(row=0, column=0, sticky=tk.W)
ttk.Label(contract_details, textvariable=contract_id_var).grid(row=0, column=1, sticky=tk.W)

ttk.Label(contract_details, text="Type:").grid(row=1, column=0, sticky=tk.W)
ttk.Label(contract_details, textvariable=contract_type_var).grid(row=1, column=1, sticky=tk.W)

ttk.Label(contract_details, text="Faction:").grid(row=2, column=0, sticky=tk.W)
ttk.Label(contract_details, textvariable=contract_faction_var).grid(row=2, column=1, sticky=tk.W)

ttk.Label(contract_details, text="Deadline:").grid(row=3, column=0, sticky=tk.W)
ttk.Label(contract_details, textvariable=contract_deadline_var).grid(row=3, column=1, sticky=tk.W)

ttk.Label(contract_details, text="Payment:").grid(row=4, column=0, sticky=tk.W)
ttk.Label(contract_details, textvariable=contract_payment_var).grid(row=4, column=1, sticky=tk.W)

# Accept Contract Button
accept_button = ttk.Button(contract_details, text="Accept Contract", command=accept_contract)
accept_button.grid(row=5, column=0, columnspan=2, sticky=tk.EW)

# Refresh Button
refresh_contracts_btn = ttk.Button(contracts, text="Refresh", command=refresh_contracts)
refresh_contracts_btn.grid(row=2, column=0, columnspan=3, sticky=tk.EW)

contracts.columnconfigure(0, weight=1)
contracts.rowconfigure(0, weight=1)

root.mainloop()
